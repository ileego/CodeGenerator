@using CodeGenerator.Core.Implements;
@using CodeGenerator.Core.Utils;
@using System.Text;
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using AutoMapper;
using System.Net;
using Microsoft.AspNetCore.Mvc;
@{
    string firstNamespace = ((string[])ViewBag.Namespace)[0];
    string className = $"{Model.ClassName}Service";
    string interfaceName = $"I{Model.ClassName}Service";
    string ns = $"{ViewBag.FullNamespace}.Services.{Model.ClassName}";
    string iRepository = $"I{Model.ClassName}Repository";
    string repository = $"{Model.VariableName}Repository";
    var variableName = $"\t\t\t{Model.VariableName}";

    var usingBuilder = new StringBuilder();
    usingBuilder.Append($"using {ViewBag.FullNamespace}.DTOs.{Model.ClassName};\r\n");
    usingBuilder.Append($"using {firstNamespace}.Core.Repository.{Model.ClassName};\r\n");
    usingBuilder.Append($"using {firstNamespace}.Infra.Common.Paging;\r\n");
    usingBuilder.Append($"using {firstNamespace}.Infra.Common.Service;\r\n");
    usingBuilder.Append($"using {firstNamespace}.Infra.Common.Uow;\r\n");
    usingBuilder.Append($"using {firstNamespace}.Infra.Common.Utils;\r\n");

    var propertiyBuilder = new StringBuilder();
    propertiyBuilder.Append("\t\tprivate readonly IMapper _mapper;\r\n");
    propertiyBuilder.Append("\t\tprivate readonly Paged _paged;\r\n");
    propertiyBuilder.Append($"\t\tprivate readonly {iRepository} _{repository};\r\n");

    var ctorBuilder = new StringBuilder();
    ctorBuilder.Append($"\t\tpublic {className}(\r\n");
    ctorBuilder.Append($"\t\t\tIUnitOfWork unitOfWork,\r\n");
    ctorBuilder.Append($"\t\t\tIMapper mapper,\r\n");
    ctorBuilder.Append($"\t\t\tPaged paged,\r\n");
    ctorBuilder.Append($"\t\t\t{iRepository} {repository},\r\n");

    var ctorAssignBuilder = new StringBuilder();
    ctorAssignBuilder.Append($"\t\t\tthis._mapper = mapper;\r\n");
    ctorAssignBuilder.Append($"\t\t\tthis._paged = paged;\r\n");
    ctorAssignBuilder.Append($"\t\t\tthis._{repository} = {repository};\r\n");

    var checkReferenceBuilder = new StringBuilder();

	if (Model.ForeignKeys.Count > 0)
    {
        foreach (var foreignKey in Model.ForeignKeys)
        {
            if (foreignKey.RefTableClassName != Model.ClassName)
            {
                //添加using
                usingBuilder.Append($"using {firstNamespace}.Core.Repository.{foreignKey.RefTableClassName};\r\n");
                //添加仓储接口，排除同名外键
                propertiyBuilder.Append($"\t\tprivate readonly I{foreignKey.RefTableClassName}Repository _{foreignKey.RefTableVariableName}Repository;\r\n");
                //添加构造
                ctorBuilder.Append($"\t\t\tI{foreignKey.RefTableClassName}Repository {foreignKey.RefTableVariableName}Repository,\r\n");
                //添加构造赋值
                ctorAssignBuilder.Append($"\t\t\tthis._{foreignKey.RefTableVariableName}Repository = {foreignKey.RefTableVariableName}Repository;\r\n");
            }

            //引用检查
            if (foreignKey.Field.IsNullable)
            {
                checkReferenceBuilder.Append($"\t\t\tif (input.{foreignKey.RefTableClassName}Id.HasValue)\r\n");
                checkReferenceBuilder.Append($"\t\t\t{{\r\n");
                checkReferenceBuilder.Append($"\t\t\t\tvar {foreignKey.RefTableVariableName} = await _{foreignKey.RefTableVariableName}Repository.FindByIdAsync(input.{foreignKey.RefTableClassName}Id.Value);\r\n");
                checkReferenceBuilder.Append($"\t\t\t\tif (null == {foreignKey.RefTableVariableName})\r\n");
                checkReferenceBuilder.Append($"\t\t\t\t{{\r\n");
                checkReferenceBuilder.Append($"\t\t\t\t\tcheck = Problem(HttpStatusCode.BadRequest, \"引用的[{foreignKey.Field.Comment.Replace("主键","")}]记录不存在\");\r\n");
                checkReferenceBuilder.Append($"\t\t\t\t\treturn check;\r\n");
                checkReferenceBuilder.Append($"\t\t\t\t}}\r\n");
                checkReferenceBuilder.Append($"\t\t\t}}\r\n");
            }
            else
            {
                checkReferenceBuilder.Append($"\t\t\tvar {foreignKey.RefTableVariableName} = await _{foreignKey.RefTableVariableName}Repository.FindByIdAsync(input.{foreignKey.RefTableClassName}Id);\r\n");
                checkReferenceBuilder.Append($"\t\t\tif (null == {foreignKey.RefTableVariableName})\r\n");
                checkReferenceBuilder.Append($"\t\t\t{{\r\n");
                checkReferenceBuilder.Append($"\t\t\t\tcheck = Problem(HttpStatusCode.BadRequest, \"引用的[{foreignKey.Field.Comment.Replace("主键","")}]记录不存在\");\r\n");
                checkReferenceBuilder.Append($"\t\t\t\treturn check;\r\n");
                checkReferenceBuilder.Append($"\t\t\t}}\r\n");
            }
            
        }
    }
    ctorBuilder.Remove(ctorBuilder.Length - 3, 3);
    ctorBuilder.Append($"\r\n\t\t\t) : base(unitOfWork)\r\n");
}
@usingBuilder.ToString()
namespace @ns
{
    /// <summary>
    /// @Model.Comment - 应用服务
    /// </summary>
    public class @className : AppService, @interfaceName
    {
        
@propertiyBuilder.ToString()
        /// <summary>
        /// Ctor
        /// </summary>
@ctorBuilder.ToString()
        {
@ctorAssignBuilder.ToString()
        }

        /// <summary>
        /// 创建
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<AppServiceResult<long>> CreateAsync(@{@Model.ClassName}InputDto input)
        {
            var problem = await CheckReferenceAsync(input);
            if (null != problem) return problem;

            var @{@Model.VariableName} = _mapper.Map<Core.Entities.@{@Model.ClassName}>(input);
            @{@variableName}.Id = SnowflakeId.Default().NextId();
            await _@{@Model.VariableName}Repository.InsertAsync(@{@Model.VariableName});
            return AppServiceResult(@{@Model.VariableName}.Id);
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="id"></param>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<AppServiceResult> UpdateAsync(long id, @{@Model.ClassName}InputDto input)
        {
            var problem = await CheckReferenceAsync(input);
            if (null != problem) return problem;

            var @{@Model.VariableName} = await _@{@Model.VariableName}Repository.FindByIdAsync(id);
            if (null == @{@Model.VariableName})
            {
                return Problem(HttpStatusCode.BadRequest, "您正在修改的数据不存在");
            }
            @{@variableName} = _mapper.Map(input, @{@Model.VariableName});
            await _@{@Model.VariableName}Repository.UpdateAsync(@{@Model.VariableName});
            return AppServiceResult();
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<AppServiceResult> DeleteAsync(long id)
        {
            var @{@Model.VariableName} = await _@{@Model.VariableName}Repository.FindByIdAsync(id);
            if (null == @{@Model.VariableName})
            {
                return Problem(HttpStatusCode.BadRequest, "您要删除的数据不存在");
            }
            await _@{@Model.VariableName}Repository.DeleteAsync(id);
            return AppServiceResult();
        }

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<AppServiceResult<@{@Model.ClassName}Dto>> GetByIdAsync(long id)
        {
            var @{@Model.VariableName} = await _@{@Model.VariableName}Repository.FindByIdAsync(id);
            if (null == @{@Model.VariableName})
            {
                return Problem(HttpStatusCode.BadRequest, "您查询的数据不存在");
            }

            var dto = _mapper.Map<@{@Model.ClassName}Dto>(@{@Model.VariableName});
            return AppServiceResult(dto);
        }

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="queryParams"></param>
        /// <returns></returns>
        public async Task<AppServiceResult<PagedResult<@{@Model.ClassName}Dto>>> QueryListAsync(@{@Model.ClassName}ParamsDto queryParams)
        {
            var query = _@{@Model.VariableName}Repository.Query
                .OrderByDescending(t => t.Id)
                .AsQueryable();
            //TODO: 需要处理查询参数
            var pagedData = await _paged.GetPagedAsync<Core.Entities.@{@Model.ClassName}, @{@Model.ClassName}Dto>(
                query,
                queryParams.PageParams.Page,
                queryParams.PageParams.PageSize);
            return AppServiceResult(pagedData);
        }

        /// <summary>
        /// 检查引用的记录是否存在
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private async Task<ProblemDetails> CheckReferenceAsync(@{@Model.ClassName}InputDto input)
        {
            ProblemDetails check = null;
@checkReferenceBuilder.ToString()
            // ReSharper disable once ExpressionIsAlwaysNull
            return await Task.FromResult(check);
        }
    }
}