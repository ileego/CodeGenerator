@using CodeGenerator.Core.Implements;
@using CodeGenerator.Core.Utils;
@using System.Text;
using CodeGenerator.Infra.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
@{
    string ref1 = $"{ViewBag.FullNamespace}.Entities;";
    string ns = $"{ViewBag.FullNamespace}.Maps";
    string className = $"{Model.ClassName}Map";
    var mapBuilder = new StringBuilder();
    foreach (Field field in Model.Fields)
    {
        mapBuilder.Append($"\t\t\tbuilder.Property(t => t.{field.PropertyName})");
        mapBuilder.Append($".HasColumnName(\"{field.FieldName}\")");
        if (field.DataType == "string" && field.Length < int.MaxValue)
        {
            mapBuilder.Append($".HasMaxLength({field.Length})");
        }
        if (!field.IsNullable)
        {
            mapBuilder.Append(".IsRequired()");
        }
        mapBuilder.Append(";\r\n");
    }
}
using System;
using @ref1
namespace @ns
{
    public class @className : EntityTypeConfiguration<@Model.ClassName>
    {
        public override void Configure(EntityTypeBuilder<@Model.ClassName> builder)
        {
            builder.ToTable("@Model.TableName");

@mapBuilder.ToString()
        }
    }
}
