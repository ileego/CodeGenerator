@using CodeGenerator.Core.Implements;
@using CodeGenerator.Core.Utils;
@using System.Text;
@{
    string ref1 = $"{ViewBag.FullNamespace}.DTOs.{Model.ClassName}";
    string ctorName = $"{Model.ClassName}Validator()";
    string className = $"{Model.ClassName}Validator";
    string modelName = $"{Model.ClassName}InputDto";
    string ns = $"{ViewBag.FullNamespace}.Validations";
    var outBuilder = new StringBuilder();
    foreach (Field field in Model.Fields)
    {
        if (field.DataType=="string")
        {
            if (!field.IsNullable)
            {
                outBuilder.Append($"\t\t\tRuleFor(t => t.{field.PropertyName}).NotEmpty().WithMessage(\"请输入{field.Comment}\");\r\n");
            }
            outBuilder.Append($"\t\t\tRuleFor(t => t.{field.PropertyName}).MaximumLength({field.Length}).WithMessage(\"{field.Comment}长度不能超过{field.Length}\");\r\n");
        }
        else if (!field.IsNullable && field.DataType!="bool")
        {
            outBuilder.Append($"\t\t\tRuleFor(t => t.{field.PropertyName}).NotEqual(t => default).WithMessage(\"{field.Comment}必须填写\");\r\n");
        }
    }
}
using @ref1;
using FluentValidation;

namespace @ns
{
    /// <summary>
    /// 配置信息验证
    /// </summary>
    public class @className:AbstractValidator<@modelName>
    {
        /// <summary>
        /// 验证配置
        /// </summary>
        public @ctorName
        {
            CascadeMode = CascadeMode.Stop;
@outBuilder.ToString()
        }
    }
}